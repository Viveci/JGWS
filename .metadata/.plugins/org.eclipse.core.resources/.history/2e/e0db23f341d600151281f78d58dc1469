package utility.collection;

public class LinkedList<T> implements ListADT<T>{
   
   private int count;
   private DoubleNode<T> list;
   
   public LinkedList(){
      count = 0;
      list = new DoubleNode<T>();
   }

   @Override
   public void add(T element){
      if(count > 0){
         DoubleNode<T> temp = list; 
         while(temp.getNext()!=null){
            temp = temp.getNext();
         }
         temp.setNext(new DoubleNode<T>(element,null,temp));
         count++;
      }
      else{
         list.setElement(element);
         count++;
      }
   }

   @Override
   public void add(int index, T element){
      if(index < count && count > 0){
         DoubleNode<T> temp = getNode(index);
         if(temp.getNext() != null){
               temp.setNext(new DoubleNode<>(element,temp.getNext(),temp));
            }
         else{
            temp.setNext(new DoubleNode<>(element,null,temp));
         }
         count++;
      }
      else if(count == 0){
         list.setElement(element);
         count++;
      }
      else{
         throw new IllegalArgumentException("The index is out of bounds");
      }
   }

   @Override
   public void set(int index, T element){
      if(index < count && count > 0){
         DoubleNode<T> temp = getNode(index);
         temp.setElement(element);
      }      
   }

   @Override
   public T get(int index){
      return getNode(index).getElement();
   }

   @Override
   public T remove(int index){
      DoubleNode<T> temp = getNode(index);
      DoubleNode<T> pre = temp.getPrevious();
      pre.setNext(null);
      count--;
      return temp.getElement();
   }

   @Override
   public T remove(T element){
      DoubleNode<T> temp = getNode(indexOf(element));
      DoubleNode<T> pre = temp.getPrevious();
      pre.setNext(null);
      count--;
      return temp.getElement();
      return null;
   }

   @Override
   public int indexOf(T element){
      DoubleNode<T> temp = list;
      int counter = 0,rtrn = -1;
      while(temp.getNext()!=null){
         if(temp.getElement().equals(element)){
            rtrn = counter;
         }
         temp = temp.getNext();
         counter++;
      }
      return rtrn;
   }

   @Override
   public boolean contains(T element)
   {
      // TODO Auto-generated method stub
      return false;
   }

   @Override
   public boolean isEmpty(){
      return (count>0);
   }

   @Override
   public int size()
   {
      // TODO Auto-generated method stub
      return 0;
   }
   
   private DoubleNode<T> getNode(int index){
      if(index < count){
         DoubleNode<T> temp = list;
         int counter = 0;
         while(counter < index){
            temp = temp.getNext();
            counter++;
         }
         return temp;
      }
      else{
         throw new IllegalArgumentException("The index is out of bound");
      }
   }

}
